package main

import (
	"fmt"
	"io/ioutil"
	"ioutil"
	"os"
	"strings"
)

func test() (z int) {
	defer func() {
		fmt.Println("defer:", z)
		z += 100
	}()
	return 100
}

func main0() {
	fmt.Println("test:", test())

	const (
		i = 1 << iota
		j
		k
		l
	)

	fmt.Println("i=", i)
	fmt.Println("j=", j)
	fmt.Println("k=", k)
	fmt.Println("l=", l)
}

func main00() {
	fmt.Println("main start")
	ch := make(chan string)
	go func() {
		val := <-ch // å‡º chan
		fmt.Println(val)
	}()
	ch <- "a" // å…¥ chan
	fmt.Println("main end")
}

type ListNode struct {
	Val  int
	Next *ListNode
}

func main() {
	m := make(map[*ListNode]int)

	listNodeArr := [3]ListNode{{1, nil}, {2, nil}, {3, nil}}
	listNodeArr[0].Next = &listNodeArr[1]
	listNodeArr[1].Next = &listNodeArr[2]

	for i := 0; i < len(listNodeArr); i++ {
		addr := &listNodeArr[i]
		//fmt.Fprintln(os.Stdout, addr, &addr, addr.Val, addr.Next)
		fmt.Printf("%p %p\n", addr, addr.Next)
		m[addr] = i
	}

	for k, v := range m {
		fmt.Fprintln(os.Stdout, &k, k.Val, v)
	}

	fmt.Println(m)

	for i, v := range listNodeArr {
		fmt.Println(i, v)
	}

	data, err := ioutil.ReadFile(os.Args[1])
	if err == nil {
		for _, line := range strings.Split(string(data), "\n") {
			fmt.Println(line)
		}

	}

}
